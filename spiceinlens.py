# -*- coding: utf-8 -*-
"""SpiceInLens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rg7fQ-e-MspGmDTzGVL6xt9ANjL1XLkv
"""

# Install required packages
!pip install selenium
!apt-get update
!apt-get install -y chromium-chromedriver

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import os

# Set up ChromeOptions
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

# Set up Chrome WebDriver
driver = webdriver.Chrome(options=chrome_options)

# Navigate to the website
url = "https://cdsco.gov.in/opencms/opencms/en/Notifications/Public-Notices/"
driver.get(url)

# Perform actions as needed
# For example, find and click on an element
# You can modify this part based on your specific requirements

# Wait for the page to load
try:
    # Wait for the presence of at least one element with an href containing '.pdf'
    WebDriverWait(driver, 100000).until(EC.presence_of_element_located((By.XPATH, "//a[contains(@href, '.pdf')]")))

    # Find all PDF links on the page
    pdf_links = driver.find_elements(By.XPATH, "//a[contains(@href, '.pdf')]")

    if pdf_links:
        # Get the latest PDF link
        latest_pdf_link = pdf_links[0].get_attribute("href")

        # Download the latest PDF
        driver.get(latest_pdf_link)

        # Wait for the download to complete (you might need to adjust the wait time)
        WebDriverWait(driver, 100000).until(lambda x: len(os.listdir('/content/sample_data')) > 0)
    else:
        print("No PDF links found on the page.")
except TimeoutException:
    print("Timed out waiting for elements to appear.")
    # Handle the timeout exception as needed
finally:
    # Close the browser
    driver.quit()

